
name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff pytest pytest-cov build boto3 twine

      - name: Run Ruff linting
        run: ruff check .

      - name: Run tests and generate reports
        run: |
          # Make sure pytest finds your tests folder and coverage runs on your package
          pytest tests/ \
            --cov=my_package \
            --cov-report=xml:coverage.xml \
            --junitxml=pytest-report.xml

      - name: Upload pytest artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pytest-artifacts-${{ matrix.python-version }}
          path: |
            coverage.xml
            pytest-report.xml

      - name: Build wheel
        run: python -m build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-files-${{ matrix.python-version }}
          path: dist/*.whl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload .whl to S3
name: CI/CD Pipeline

on:
  push:
    branches: [ "*" ]  # Run on all branches
    tags: [ "v*" ]     # Run on version tags
  pull_request:
    branches: [ "*" ]  # Run on PRs to all branches

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Install dependencies including dev/test dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install build twine boto3 ruff

      # Lint with Ruff
      - name: Lint with Ruff
        run: ruff check .

      # Run tests and generate coverage
      - name: Test with pytest
        run: |
          pytest -v --cov=file_encoder --cov-report=xml --cov-report=term-missing > pytest-output.txt 2>&1

      # Upload test artifacts
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.13'
        with:
          name: test-results
          path: |
            pytest-output.txt
            coverage.xml
          retention-days: 30

      # Build wheel
      - name: Build package
        run: python -m build

      # Configure AWS credentials (only on main branch or version tags)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: matrix.python-version == '3.13' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Upload wheel to S3
      - name: Upload wheel to S3
        if: matrix.python-version == '3.13' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          for file in dist/*.whl; do
            if [ -f "$file" ]; then
              aws s3 cp "$file" s3://${{ secrets.S3_BUCKET_NAME }}/wheels/
            fi
          done

      # Configure CodeArtifact
      - name: Configure CodeArtifact
        if: matrix.python-version == '3.13' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          pip install twine
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_DOMAIN_OWNER }} --query authorizationToken --output text --region ${{ secrets.AWS_REGION }})
          export CODEARTIFACT_REPOSITORY_URL=$(aws codeartifact get-repository-endpoint --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --repository ${{ secrets.CODEARTIFACT_REPO }} --format pypi --query repositoryEndpoint --output text --region ${{ secrets.AWS_REGION }})
          echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> $GITHUB_ENV
          echo "CODEARTIFACT_REPOSITORY_URL=$CODEARTIFACT_REPOSITORY_URL" >> $GITHUB_ENV

      # Publish to CodeArtifact
      - name: Publish to CodeArtifact
        if: matrix.python-version == '3.13' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          # Delete previous version if exists
          aws codeartifact delete-package-versions \
            --domain ${{ secrets.CODEARTIFACT_DOMAIN }} \
            --repository ${{ secrets.CODEARTIFACT_REPO }} \
            --format pypi \
            --package file-encoder \
            --versions 0.1.0 \
            --region ${{ secrets.AWS_REGION }} || true

          # Upload new wheel
          twine upload --repository-url $CODEARTIFACT_REPOSITORY_URL \
            --username aws \
            --password $CODEARTIFACT_AUTH_TOKEN \
            dist/*.whl
